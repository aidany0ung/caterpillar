text = element_text(family='Times'),
plot.title = element_text(family = 'Times', hjust = .5, size =15),
#plot.title = margin(40,0,40,0, unit = 'pt'),
axis.title = element_text(family = 'Times', size = 12),
legend.key = element_rect(colour = "transparent", fill = "white")
) +
#scale_color_manual(values=wes_palette(name="GrandBudapest")) +
# geom_smooth(aes(y = t2),method="lm", se=FALSE, col="dodgerblue") +
# geom_point(aes(y = t2),shape=15,col="dodgerblue3") +
# geom_smooth(aes(y = t2_1),method="lm", se=FALSE, col="darkseagreen") +
# geom_point(aes(y = t2_1),shape=18,size=2,col="darkseagreen4") +
ggtitle("Concentration of Crystal Violet versus Time, Part 2 ([NaOH] = 0.051)" ) +
labs(y="Concentration of Crystal Violet (moles/liter)", x="Time (seconds)") +
#theme(legend.key.width = unit(3,'cm')) +
scale_color_discrete(name = "", labels = c('Trial 1        ', 'Trial 2        ', 'Trial 3        ')) +
stat_regline_equation(label.x= 50, show.legend = F) +
stat_regline_equation(label.x=50, aes(label = ..rr.label..))
#theme(legend.key.size = unit(10.0,'cm') +
#theme(legend.key.height = unit(2.0, 'cm')
#annotate("text",label='y=155317x - 0.0987\nR² = 0.994', x=150,y = .000005)
#annotate("text",label='', x=.000003,y = .65) +
#annotate("text",label='')
library(ggplot2)
library(readr)
library(ggpubr)
library(wesanderson)
dataaa <- read_csv("Documents/part2linearconc.csv")
dataa <- reshape2::melt(dataaa, id.var = "t")
ggplot(data=dataa, aes(x=t, y=value, color=variable)) +
geom_smooth(method="lm", se=FALSE,size = .65) +
geom_point() +
theme_classic() +
theme(panel.grid.major = element_line(color='gray',size=.15),
panel.grid.minor = element_line(color='gray', size=.1),
text = element_text(family='Times'),
plot.title = element_text(family = 'Times', hjust = .5, size =15),
#plot.title = margin(40,0,40,0, unit = 'pt'),
axis.title = element_text(family = 'Times', size = 12),
legend.key = element_rect(colour = "transparent", fill = "white")
) +
#scale_color_manual(values=wes_palette(name="GrandBudapest")) +
# geom_smooth(aes(y = t2),method="lm", se=FALSE, col="dodgerblue") +
# geom_point(aes(y = t2),shape=15,col="dodgerblue3") +
# geom_smooth(aes(y = t2_1),method="lm", se=FALSE, col="darkseagreen") +
# geom_point(aes(y = t2_1),shape=18,size=2,col="darkseagreen4") +
ggtitle("Concentration of Crystal Violet versus Time, Part 2 ([NaOH] = 0.051)" ) +
labs(y="Concentration of Crystal Violet (moles/liter)", x="Time (seconds)") +
#theme(legend.key.width = unit(3,'cm')) +
scale_color_discrete(name = "", labels = c('Trial 1        ', 'Trial 2        ', 'Trial 3        ')) +
stat_regline_equation(label.x= 50, show.legend = F) +
stat_regline_equation(label.x=50, label.y = .000006, aes(label = ..rr.label..))
#theme(legend.key.size = unit(10.0,'cm') +
#theme(legend.key.height = unit(2.0, 'cm')
#annotate("text",label='y=155317x - 0.0987\nR² = 0.994', x=150,y = .000005)
#annotate("text",label='', x=.000003,y = .65) +
#annotate("text",label='')
library(ggplot2)
library(readr)
library(ggpubr)
library(wesanderson)
dataaa <- read_csv("Documents/part2linearconc.csv")
dataa <- reshape2::melt(dataaa, id.var = "t")
ggplot(data=dataa, aes(x=t, y=value, color=variable)) +
geom_smooth(method="lm", se=FALSE,size = .65) +
geom_point() +
theme_classic() +
theme(panel.grid.major = element_line(color='gray',size=.15),
panel.grid.minor = element_line(color='gray', size=.1),
text = element_text(family='Times'),
plot.title = element_text(family = 'Times', hjust = .5, size =15),
#plot.title = margin(40,0,40,0, unit = 'pt'),
axis.title = element_text(family = 'Times', size = 12),
legend.key = element_rect(colour = "transparent", fill = "white")
) +
#scale_color_manual(values=wes_palette(name="GrandBudapest")) +
# geom_smooth(aes(y = t2),method="lm", se=FALSE, col="dodgerblue") +
# geom_point(aes(y = t2),shape=15,col="dodgerblue3") +
# geom_smooth(aes(y = t2_1),method="lm", se=FALSE, col="darkseagreen") +
# geom_point(aes(y = t2_1),shape=18,size=2,col="darkseagreen4") +
ggtitle("Concentration of Crystal Violet versus Time, Part 2 ([NaOH] = 0.051)" ) +
labs(y="Concentration of Crystal Violet (moles/liter)", x="Time (seconds)") +
#theme(legend.key.width = unit(3,'cm')) +
scale_color_discrete(name = "", labels = c('Trial 1        ', 'Trial 2        ', 'Trial 3        ')) +
stat_regline_equation(label.x= 50, show.legend = F) +
stat_regline_equation(label.x=110, aes(label = ..rr.label..))
#theme(legend.key.size = unit(10.0,'cm') +
#theme(legend.key.height = unit(2.0, 'cm')
#annotate("text",label='y=155317x - 0.0987\nR² = 0.994', x=150,y = .000005)
#annotate("text",label='', x=.000003,y = .65) +
#annotate("text",label='')
library(ggplot2)
library(readr)
library(ggpubr)
library(wesanderson)
dataaa <- read_csv("Documents/part2linearconc.csv")
dataa <- reshape2::melt(dataaa, id.var = "t")
ggplot(data=dataa, aes(x=t, y=value, color=variable)) +
geom_smooth(method="lm", se=FALSE,size = .65) +
geom_point() +
theme_classic() +
theme(panel.grid.major = element_line(color='gray',size=.15),
panel.grid.minor = element_line(color='gray', size=.1),
text = element_text(family='Times'),
plot.title = element_text(family = 'Times', hjust = .5, size =15),
#plot.title = margin(40,0,40,0, unit = 'pt'),
axis.title = element_text(family = 'Times', size = 12),
legend.key = element_rect(colour = "transparent", fill = "white")
) +
#scale_color_manual(values=wes_palette(name="GrandBudapest")) +
# geom_smooth(aes(y = t2),method="lm", se=FALSE, col="dodgerblue") +
# geom_point(aes(y = t2),shape=15,col="dodgerblue3") +
# geom_smooth(aes(y = t2_1),method="lm", se=FALSE, col="darkseagreen") +
# geom_point(aes(y = t2_1),shape=18,size=2,col="darkseagreen4") +
ggtitle("Concentration of Crystal Violet versus Time, Part 2 ([NaOH] = 0.051)" ) +
labs(y="Concentration of Crystal Violet (moles/liter)", x="Time (seconds)") +
#theme(legend.key.width = unit(3,'cm')) +
scale_color_discrete(name = "", labels = c('Trial 1        ', 'Trial 2        ', 'Trial 3        ')) +
stat_regline_equation(label.x= 50, show.legend = F) +
stat_regline_equation(label.x=105, show.legend =F,aes(label = ..rr.label..))
#theme(legend.key.size = unit(10.0,'cm') +
#theme(legend.key.height = unit(2.0, 'cm')
#annotate("text",label='y=155317x - 0.0987\nR² = 0.994', x=150,y = .000005)
#annotate("text",label='', x=.000003,y = .65) +
#annotate("text",label='')
library(ggplot2)
library(readr)
library(ggpubr)
library(wesanderson)
dataaa <- read_csv("Documents/part2linearconc.csv")
dataa <- reshape2::melt(dataaa, id.var = "t")
ggplot(data=dataa, aes(x=t, y=value, color=variable)) +
geom_smooth(method="lm", se=FALSE,size = .65) +
geom_point() +
theme_classic() +
theme(panel.grid.major = element_line(color='gray',size=.15),
panel.grid.minor = element_line(color='gray', size=.1),
text = element_text(family='Times'),
plot.title = element_text(family = 'Times', hjust = .5, size =15),
#plot.title = margin(40,0,40,0, unit = 'pt'),
axis.title = element_text(family = 'Times', size = 12),
legend.key = element_rect(colour = "transparent", fill = "white")
) +
#scale_color_manual(values=wes_palette(name="GrandBudapest")) +
# geom_smooth(aes(y = t2),method="lm", se=FALSE, col="dodgerblue") +
# geom_point(aes(y = t2),shape=15,col="dodgerblue3") +
# geom_smooth(aes(y = t2_1),method="lm", se=FALSE, col="darkseagreen") +
# geom_point(aes(y = t2_1),shape=18,size=2,col="darkseagreen4") +
ggtitle("Concentration of Crystal Violet versus Time, Part 2 ([NaOH] = 0.051)" ) +
labs(y="Concentration of Crystal Violet (moles/liter)", x="Time (seconds)") +
#theme(legend.key.width = unit(3,'cm')) +
scale_color_discrete(name = "", labels = c('Trial 1        ', 'Trial 2        ', 'Trial 3        ')) +
stat_regline_equation(label.x= 50, show.legend = F) +
stat_regline_equation(label.x=107, show.legend =F,aes(label = ..rr.label..))
#theme(legend.key.size = unit(10.0,'cm') +
#theme(legend.key.height = unit(2.0, 'cm')
#annotate("text",label='y=155317x - 0.0987\nR² = 0.994', x=150,y = .000005)
#annotate("text",label='', x=.000003,y = .65) +
#annotate("text",label='')
install.packages(ggmisc)
install.packages(ggpmisc)
install.packages('ggpmisc')
install.packages("ggpmisc")
install.packages("ggpmisc")
ggplot(data = data, mapping = aes(x = random1, y = random2, size = size)) +
geom_point()+
facet_grid(.~location)
library(tidyverse)
location <- c('land', 'seafloor')
size <- c('7.1', '.1')
random1 <- c(1,1)
random2 <- c(1,1)
data <- data.frame(location, size, random1, random2)
ggplot(data = data, mapping = aes(x = random1, y = random2, size = size)) +
geom_point()+
facet_grid(.~location)
library(tidyverse)
location <- c('land', 'seafloor')
size <- c(7.1, .1)
random1 <- c(1,1)
random2 <- c(1,1)
data <- data.frame(location, size, random1, random2)
ggplot(data = data, mapping = aes(x = random1, y = random2, size = size)) +
geom_point()+
facet_grid(.~location)
library(tidyverse)
location <- c('land', 'seafloor')
size <- c(7.5, .1)
random1 <- c(1,1)
random2 <- c(1,1)
data <- data.frame(location, size, random1, random2)
ggplot(data = data, mapping = aes(x = random1, y = random2, size = size)) +
geom_point()+
facet_grid(.~location) +
xlim(.95, 1.05)+
ylim(.95, 1.05)
library(readr)
temp <- read_csv("Documents/temp.txt", col_names = FALSE,
col_types = cols_only(`5` = col_guess()))
View(temp)
library(readr)
q1 <- read_csv("Documents/temp.txt")
View(q1)
install.packages('spData')
?spData
library(spData)
`install.packages('spDataLarge'
a
as
fa
s fkjdsfs lk
''
'''
stop
/
``
1``
install.packages('spDataLarge')
library(dplyr)
library(ggplot2)
library(spData)
nz = new_zealand
nz = new_zealand()
nz = spData(new_zealand)
nz <- new_zealand
nz = new_zealand
nz = nz
newz = nz
newz = nz
nh = nz_height
ggplot(newz) +
geom_sf
ggplot(newz) +
geom_sf()
ggplot(newz) +
geom_sf() +
geom_sf(nh)
ggplot(newz) +
geom_sf() +
geom_sf(data=nh)
theme_minimal()
ggplot(newz) +
geom_sf() +
geom_sf(data=nh, aes(color = elevation))
theme_minimal()
ggplot(newz) +
geom_sf() +
geom_sf(data=nh, aes(color = elevation)) +
theme_bw()
ggplot(newz) +
geom_sf() +
geom_sf(data=nh, aes(color = elevation)) +
theme_minimal()
ggplot(newz) +
geom_sf(aes(fill = Median_income, alpha = Population)) +
geom_sf(data=nh, aes(color = elevation)) +
theme_minimal()
ggplot(newz) +
geom_sf(aes(fill = Median_income, alpha = Population)) +
geom_sf(data=nh, aes(color = elevation)) +
scale_color_ordinal()
ggplot(newz) +
geom_sf(aes(fill = Median_income, alpha = Population)) +
geom_sf(data=nh, aes(color = elevation)) +
scale_color_continuous()
theme_minimal()
ggplot(newz) +
geom_sf(aes(fill = Median_income, alpha = Population)) +
scale_color_viridis_b()
geom_sf(data=nh, aes(color = elevation)) +
theme_minimal()
ggplot(newz) +
geom_sf(aes(fill = Median_income, alpha = Population)) +
scale_color_viridis()
ggplot(newz) +
geom_sf(aes(fill = Median_income, alpha = Population)) +
scale_color_viridis() +
geom_sf(data=nh, aes(color = elevation)) +
theme_minimal()
ggplot(newz) +
geom_sf(aes(fill = Median_income, alpha = Population)) +
scale_fill_viridis_b() +
geom_sf(data=nh, aes(color = elevation)) +
theme_minimal()
ggplot(newz) +
geom_sf(aes(fill = Median_income, alpha = Population)) +
scale_fill_viridis_b() +
theme(legend.position = 'NONE')
geom_sf(data=nh, aes(color = elevation)) +
theme_minimal()
iris = data(iris)
ggplot(iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color = Species))
ggplot(data = iris, aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color = Species))
iris%>%
ggplot(aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color = Species))
iris = data(iris)
iris
iris = iris3
iris%>%
ggplot(aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color = Species))
iris%>%
ggplot(aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color = Species))
iris
iris%>%
ggplot(aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color = Species))
iris3
iris
iris3 %>%
ggplot(aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color = Species))
melt(iris)
library(dplyr)
library(ggplot2)
iris3 %>%
ggplot(aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color = Species))
ggplot(aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color = Species))
ggplot(data = iris,aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color = Species))
library(dplyr)
library(ggplot2)
iris
ggplot(data = iris,aes(x = Petal.Length, y = Petal.Width)) +
geom_point(aes(color = Species))
install.packages('class')
install.packages("class")
library(dplyr)
library(ggplot2)
library(class)
library(ggplot2)
library(dplyr)
library(rnatural)
states = rnaturalearth
?rnaturalearth
??rnaturalearth
states = ne_states(country = "USA")
states = ne_states(country = "United States of America")
library(ggplot2)
library(dplyr)
library(rnaturalearth)
states = ne_states(country = "United States of America")
install.packages("rnaturalearthhires", repos = "http://packages.ropensci.org", type = "source")
states = ne_states(country = "United States of America")
install.packages("rnaturalearthhires", repos = "http://packages.ropensci.org", type = "source")
states = ne_countries(country = "United States of America")
states = ne_countries(country = "United States of America")
states
states = ne_states(country = "United States of America")
states = ne_states(country = "United States of America")
states = ne_states(country = "United States of America")
install.packages("rnaturalearthhires")
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github('andreacirilloac/updateR')
R.Version()
shiny::runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
library(leafem)
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
library(tidyverse)
library(sf)
library(stringr)
library(units)
`%notin%` <- Negate(`%in%`)
sf_use_s2(TRUE)
getString <- function(lettercode,level){
lst <- c("gadm40_",lettercode,"_shp/gadm40_",lettercode,"_",level,".shp")
str_c(lst,collapse="")}
if("main2.Rda" %in% list.files()){
load("main2.Rda")
}else{
cc <- readxl::read_excel("Book1.xlsx")
countries <- cc$`3 Letter Code`
var <- TRUE
for(i in countries){
print(i)
if(var == TRUE ){
if(is.na(i)){
}else{
if(file.exists(getString(i,2))) {
main <- st_read(getString(i,2))
}else{
main <- st_read(getString(i,1))
}
var <- FALSE
}
}else if(is.na(i)){
}else{
if(file.exists(getString(i,2))) {
temp <- st_read(getString(i,2))
main <- bind_rows(main,temp)
}else{
temp <- st_read(getString(i,1))
main <- bind_rows(main,temp)
}
}
}
main2 <- main %>%
mutate(ENGTYPE = case_when(is.na(ENGTYPE_1) ~ ENGTYPE_2,
is.na(ENGTYPE_2) ~ ENGTYPE_1),
NAME = case_when(is.na(NAME_2) ~ NAME_1,
!is.na(NAME_2) ~ NAME_2)) %>%
select(-ENGTYPE_1, -ENGTYPE_2) %>%
ungroup() %>%
mutate(PRESENT = paste((NAME),", ",str_to_title(COUNTRY),sep="")) %>%
filter(ENGTYPE != "Water body" & ENGTYPE != "Water Body")
main2$ENGTYPE[main2$ENGTYPE == "Municipiality"] <- "Municipality"
save(main2, file = "main2.Rda")
}
main2[420,]
main2[420,] %>%
st_bbox() %>%
st_as_sfc()
species <- load("species.Rda")
species <- load("species.Rda")
species <- load("www/species.Rda")
species <- load("www/species.Rda")
shiny::runApp('Documents/rangemap/wireframe/src/app1')
load("species.Rda")
load("main2.Rda")
specie <- st_drop_geometry(species)
mainnull <- st_drop_geometry(main2)
if("returnkm.Rda" %in% list.files()){
load("returnkm.Rda")
}else{
lst <- c("County","Calcd")
for(i in 1:nrow(species)){
lst <- append(lst,specie[i,"name"])
}
returnkm <-as.data.frame(matrix(nrow=1,ncol=length(lst)))
colnames(returnkm) <- lst
}
if("returnkmperc.Rda" %in% list.files()){
load("returnkmperc.Rda")
}else{
lst <- c("County","Calcd")
for(i in 1:nrow(species)){
lst <- append(lst,specie[i,"name"])
}
returnkmperc <-as.data.frame(matrix(nrow=1,ncol=length(lst)))
colnames(returnkmperc) <- lst
}
namess <- pull(returnkm, "County")
for(county in 1:nrow(main2)){
if(!(mainnull[county, "PRESENT"] %in% namess)){
km <- c(mainnull[county,"PRESENT"],"Calculated")
kmperc <- c(mainnull[county,"PRESENT"],"Calculated")
for(spec in 1:nrow(species)){
message(paste(county,".",spec,sep=""))
#break
if(within2(species[spec,],main2[county,]))
#if(lengths(st_intersects(species[spec,], main2[county,])) > 0){
#warning(species[spec,])
#warning(main2[county,])
output <- calculatePolygonOverlap("DOESNT_MATTER",species[spec,],main2[county,])
km <- append(km,output[1,2])
kmperc <- append(kmperc,output[1,3])
}else{
runApp('Documents/rangemap/wireframe/src/app1')
runApp()
shiny::runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
install.packages("plotly")
runApp('Documents/rangemap/wireframe/src/app1')
runApp()
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
?nearPoints
runApp('Documents/rangemap/wireframe/src/app1')
runApp('Documents/rangemap/wireframe/src/app1')
?hover_tip
setwd("~/Documents/caterpillar")
